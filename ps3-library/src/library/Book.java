package library;

import java.util.Collections;
import java.util.List;

/**
 * Book is an immutable type representing an edition of a book -- not the physical object, 
 * but the combination of words and pictures that make up a book.  Each book is uniquely
 * identified by its title, author list, and publication year.  Alphabetic case and author 
 * order are significant, so a book written by "Fred" is different than a book written by "FRED".
 */
public class Book {

    // TODO: rep
    
    // TODO: rep invariant
    // TODO: abstraction function
    // TODO: safety from rep exposure argument
    
    /**
     * Make a Book.
     * @param title Title of the book. Must contain at least one non-space character.
     * @param authors Names of the authors of the book.  Must have at least one name, and each name must contain 
     * at least one non-space character.
     * @param year Year when this edition was published in the conventional (Common Era) calendar.  Must be nonnegative. 
     */
    private final String title;
    private final List<String> authors;
    private final int year;
    
    public Book(String title, List<String> authors, int year) {
//        throw new RuntimeException("not implemented yet");
        this.title = title;
        // https://stackoverflow.com/questions/30348292/how-to-create-immutable-list-in-java
        this.authors = Collections.unmodifiableList(authors);
        this.year = year;
        checkRep();
    }
    
    public Book(Book book) {
        this(book.title, book.authors, book.year);
        checkRep();
    }
    
    // assert the rep invariant
    private void checkRep() {
//      throw new RuntimeException("not implemented yet");
        assert isValidTitle(title);
        assert isValidAuthor(authors);
        assert isValidYear(year);
    }
    
    private boolean isValidTitle(String title) {
        return !title.replaceAll("\\s+", "").isEmpty();
    }
    
    private boolean isValidAuthor(List<String> authors) {
        for (String author : authors) {
            if (!isValidTitle(author)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isValidYear(int year) {
        return year > 0;
    }
    
    /**
     * @return the title of this book
     */
    public String getTitle() {
        return title;
    }
    
    /**
     * @return the authors of this book
     */
    public List<String> getAuthors() {
        return authors;
    }

    /**
     * @return the year that this book was published
     */
    public int getYear() {
        return year;
    }

    /**
     * @return human-readable representation of this book that includes its title,
     *    authors, and publication year
     */
    @Override
    public String toString() {
        return "The book is titled " + title + ", written by " + authors + " and published in " + year + ".";
    }

    // automatically generated by eclipse: http://www.baeldung.com/java-eclipse-equals-and-hashcode
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((authors == null) ? 0 : authors.hashCode());
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        result = prime * result + year;
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Book other = (Book) obj;
        if (authors == null) {
            if (other.authors != null)
                return false;
        } else if (!authors.equals(other.authors))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        if (year != other.year)
            return false;
        return true;
    }

    //http://www.baeldung.com/java-hashcode
//     @Override
//     public boolean equals(Object that) {
//         if (this == that) return true;
//         if (that == null) return false;
//         if (this.getClass() != that.getClass()) return false;
//         Book book = (Book) that;
//         return title.equals(book.getTitle()) && authors.equals(book.getAuthors()) && year == book.getYear();
//     }
//     
//     @Override
//     public int hashCode() {
//         throw new RuntimeException("not implemented yet");
//     }



    /* Copyright (c) 2016 MIT 6.005 course staff, all rights reserved.
     * Redistribution of original or derived work requires explicit permission.
     * Don't post any of this code on the web or to a public Github repository.
     */

}
